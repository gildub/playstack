#!/usr/bin/env ruby
require 'configatron'
require 'erb'
require 'fileutils'
require 'optparse'
require 'ostruct'
require 'pathname'
require 'securerandom'
require 'yaml'

BASE  = File.dirname(__FILE__)

ROLES = [ :infra, :controllers, :dashboard, :networker, :compute ]

class Optparse
  def self.parse(args)
    options = OpenStruct.new
    options.false = false
    options.answerfile = ''
    options.includes = []
    options.ip_admin = ''
    options.ip_internal = ''
    options.ip_public = ''
    options.password = ''
    options.keep = ''

    opt_parser = OptionParser.new do |opts|
      opts.banner = "Usage: #{__FILE__} [OPTIONS]"

      opts.separator "  OPTIONS:"

      opts.on('-dPASSWD', '--dev=PASSWD', "Use single password. Overrides answer file if provided") do |p|
        options.password = p
      end

      opts.on('--answer=FILENAME', 'Use provided answer file') do |f|
        options.answerfile = f
      end

      opts.on('-aIP', '--admin=IP', 'Admin IP. Overrides answer file if provided') do |ip|
        options.ip_admin = ip
      end

      opts.on('-iIP', '--internal=IP', 'Internal IP. Overrides answer file if provided') do |ip|
        options.ip_internal = ip
      end

      opts.on('-pIP', '--public=IP', 'Public IP. Overrides answer file if provided') do |ip|
        options.ip_public = ip
      end

      opts.on('--include=LIST', 'Include only') do |list|
        options.includes = list.split(',')
      end

      opts.on('-k', '--keep=FILE', 'Dump parameters to FILE') do |f|
        options.keep = f
      end

      opts.on_tail('-h', '--help', 'Show this message') do
        puts opts
        exit
      end
    end
    opt_parser.parse!(args)
    options
  end
end

module Helpers
  def fatal(str)
    puts ('FATAL: ' + str)
    exit
  end

  def erb_process_tree(dirname)
    Dir.foreach(dirname) do |dir|
      dirpath = File.join(dirname, dir)
      if File.directory?(dirpath) then
        if dir != '.' && dir != '..' then
          erb_process_tree(dirpath)
        end
      elsif dirpath =~ /\.erb$/
        result = ERB.new(File.read(dirpath))
        file = dirpath.gsub(/\.erb/,'')
        File.open(file, 'w') do |f|
          f << result.result(binding)
        end
        File.delete(dirpath)
      end
    end
  end

  def verify_tree(dirname)
    Dir.foreach(dirname) do |dir|
      dirpath = File.join(dirname, dir)
      if File.directory?(dirpath) then
        if dir != '.' && dir != '..' then
          verify_tree(dirpath)
        end
      else
        File.readlines(dirpath).each do |line|
          fatal("missing variable => #{line}") if line =~ /configatron/
        end
      end
    end
  end

  def get_yaml(filename)
    fatal("Cannot open #{filename}") unless filename && File.exist?(filename)
    YAML.load(File.read(filename))
  end
end

class HieraData
  attr_reader :target, :template_net_node_path

  def initialize(target)
    @target = target
    @template_net_node_path = File.join(BASE, 'templates', 'networker-node.yaml.erb')

    FileUtils.cp_r(File.join(BASE, 'hiera'), '.')
  end
end

class Node
  attr_reader :fw, :data, :name, :profiles, :roles

  def initialize(name, roles, profiles)
    @name = name
    @fw = {}
    @data = {}
    @profiles = profiles
    @roles = roles
  end

  def add_data(data)
    @data.merge!(data)
  end

  def add_fw(data)
    @fw.merge!(data)
  end

  def to_manifest
    str = StringIO.open do |s|
      s.puts "node /#{@name}/ {"
      @profiles.each do |e|
        s.puts "  role {'#{e}':}"
      end
      s.puts "}\n"
      s.string
    end
  end
end

class Site
  attr_reader :nodes, :target

  def initialize(target)
    @target = target
    @nodes = []

    FileUtils.cp_r(File.join(BASE, 'manifests'), @target)
  end

  def add_node(node)
    @nodes << node
  end

  def nodes_to_file(filename)
    File.open(File.join(@target, filename), 'w') do |file|
      @nodes.each { |node| file << node.to_manifest }
    end
  end
end

class Playstack
  include Helpers

  def initialize(options)
    openstack_ref = get_yaml(File.join(BASE, 'config/openstack.yaml'))
    scenario_ref  = get_yaml(File.join(BASE, 'config/scenario.yaml'))

    @firewall_ref = get_yaml(File.join(BASE, 'config/firewall.yaml'))
    @scenes_ref  = get_yaml(File.join(BASE, 'config/scenes.yaml'))

    @password = options.password

    unless options.answerfile == ''
      configatron.configure_from_hash(get_yaml(options.answerfile))
      set_passwords unless options.password.empty?
    else
      configatron.scenario.configure_from_hash(scenario_ref)
      configatron.openstack.configure_from_hash(openstack_ref)
      set_passwords
    end

    configatron.scenario.ip.admin = options.ip_admin if options.ip_admin != ''
    configatron.scenario.ip.internal = options.ip_internal if options.ip_internal != ''
    configatron.scenario.ip.public = options.ip_public if options.ip_public !=''

    fatal('Admin IP is missing!') if configatron.scenario.ip.admin == ''
    fatal('Internal IP is missing!') if configatron.scenario.ip.internal == ''
    fatal('Public IP is missing!') if configatron.scenario.ip.public == ''

    configatron.scenario.include = options.includes unless options.includes.empty?

    @data = HieraData.new('hiera')
    @site = Site.new('manifests')

    load_roles

    configatron.scenario.nodes.each do |node, roles|
      roles_all = []
      roles.each do |role|
        roles_all << configatron.scenario.profiles[role]
      end
      @site.add_node(Node.new(node, roles, roles_all.flatten.uniq))
    end
  end

  def set_passwords
    configatron.openstack.admin.password = secret
    configatron.openstack.admin.token = secret
    configatron.openstack.dbms.root.password = secret
    configatron.openstack.glance.password = secret
    configatron.openstack.horizon.secret_key = secret
    configatron.openstack.keystone.password = secret
    configatron.openstack.neutron.metadata.shared_secret = secret
    configatron.openstack.neutron.password = secret
    configatron.openstack.nova.password = secret
    configatron.openstack.rabbitmq.password = 'guest'
  end

  def load_roles
    profiles = {}
    @scenes_ref.each do |role, roles|
      fatal("Unknown Role symbol: #{role}") unless ROLES.include?(role)
      included_profiles = []
      configatron.scenario.include.each do |inc|
        roles.each { |e| included_profiles << e if e =~ (/^#{inc}/) }
      end
      profiles.merge!( { role => included_profiles } )
    end
    configatron.scenario.profiles.configure_from_hash(profiles)
  end

  def game
    @site.nodes.each do |node|
      node.roles.each do |role|

        # Add firewall rules for tunneling
        if role == 'networker' || role == 'compute'
          if configatron.openstack.neutron.has_key?(:tunnel)
            node.add_fw( 'tunnel' =>  @firewall_ref['tunnel'][configatron.openstack.neutron.tunnel] )
          end
        end

        # Add external bridge (br-ex)
        if role == 'networker'
          node.add_data(YAML.load(File.read(@data.template_net_node_path)))
        end
      end

    # Firewall rules per node
      nodes_fw_rules = {}
      node.profiles.each do |profile|
        nodes_fw_rules.merge!( profile => @firewall_ref[profile] ) if @firewall_ref.include?(profile)
      end
      node.add_fw(nodes_fw_rules)
    end

    @site.nodes_to_file('site.pp')

    # Hiera hostname
    @site.nodes.each do |node|
      data = node.data
      data.merge!( 'security::firewall' => node.fw )
      File.open(File.join(@data.target, "#{node.name}.yaml.erb"), 'w') do |file|
        file << YAML.dump(data)
      end
    end

    erb_process_tree(@data.target)
    erb_process_tree(@site.target)
  end

  def verify
    verify_tree(@data.target)
    verify_tree(@site.target)
  end

  def answer_file_save
    File.open('answer.yaml', 'w') { |f| f << YAML.dump(configatron.to_h) }
  end

  def config_dump
    config = configatron.inspect
    str = ''
    config.each_line do |f|
      str << f.gsub(/configatron\./,'')
    end
    str + "\n"
  end

  def secret
    @password.empty? ? SecureRandom.hex : @password
  end
end

options = Optparse.parse(ARGV)

player = Playstack.new(options)
player.game
player.verify
player.answer_file_save
if options.keep != ''
  File.open(options.keep, 'w') { |f| f << player.config_dump }
end
